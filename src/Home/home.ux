<template>
    <div class="col">
        <div class="row">
            <select @change="onLanguageChanged">
                <option for="languageSelect" value="{{$item.value}}" selected="false">{{$item.text}}</option>
            </select>
            <select @change="onSinceChanged">
                <option for="sinceSelect" value="{{$item.value}}" selected="false">{{$item.text}}</option>
            </select>
        </div>
        <list>
            <list-item for="repoList" class="list-item" type="repo" @click="openRepo($item.fullName)">
                <text>{{$item.fullName}}</text>
                <text>{{$item.desc}}</text>
            </list-item>
        </list>
    </div>
</template>

<style>
    .col {
        flex-direction: column;
        justify-content: center;
        align-content: center;
        align-items: center;
    }

    .row {
        flex-direction: row;
        justify-content: center;
        align-content: center;
        align-items: center;
    }

    .list-item {
        padding: 16px;
        /* height: 100px */
        flex-direction: column;
    }
</style>

<script>
    import { fetch } from '@system.fetch'
    import router from '@system.router'
    import { Parser } from 'htmlparser2'

    var $
    const parser = new Parser({
        items: [],
        listStart: false,
        nameStart: false,
        descStart: false,
        onopentag(name, attributes) {
            if (name == "ol" && attributes.class == "repo-list") {
                this.listStart = true
            } else if (this.listStart) {
                if (name == "li" && attributes.class == "col-12 d-block width-full py-4 border-bottom") {
                    this.items.push({ fullName: "", desc: "" })
                } else if (name == "h3") {
                    this.nameStart = true
                } else if (name == "a" && this.nameStart) {
                    this.items[this.items.length - 1].fullName = attributes.href.substring(1)
                } else if (name == "p" && attributes.class == "col-9 d-inline-block text-gray m-0 pr-4") {
                    this.descStart = true
                }
            }
        },
        ontext(text) {
            if (this.descStart) {
                this.items[this.items.length - 1].desc += text.trim()
            }
        },
        onclosetag(name) {
            if (name == "ol") {
                this.listStart = false
            } else if (name == "h3") {
                this.nameStart = false
            } else if (name == "p") {
                this.descStart = false
            }
        },
        onend() {
            $.repoList = this.items
            this.items = []
        }
    })

    var language = ""
    var since = "daily"

    module.exports = {
        private: {
            repoList: [],
            languageSelect: [{
                text: "All languages",
                value: ""
            }, {
                text: "Java",
                value: "java"
            }, {
                text: "Kotlin",
                value: "kotlin"
            }],
            sinceSelect: [{
                text: "today",
                value: "daily"
            }, {
                text: "this week",
                value: "weekly"
            }, {
                text: "this month",
                value: "monthly"
            }]
        },
        onInit() {
            $ = this
            $.$page.setTitleBar({
                text: 'GithubTrending',
                textColor: '#ffffff',
            })
            $.fetchTrending()
        },
        fetchTrending() {
            $.repoList = []
            var startTime = new Date().getTime()
            fetch({
                url: `https://github.com/trending/${language}?since=${since}`,
                success(response) {
                    var currentTime = new Date().getTime()
                    console.log(`download time: ${currentTime - startTime}ms`)
                    startTime = currentTime

                    parser.write(response.data)
                    parser.end()

                    currentTime = new Date().getTime()
                    console.log(`parse time: ${currentTime - startTime}ms`)
                },
                fail(err, code) {
                }
            })
        },
        openRepo(fullName) {
            router.push({
                uri: `https://github.com/${fullName}/blob/master/README.md`
            })
            // router.push({
            //     uri: '/repo',
            //     params: { fullName: fullName }
            // })
        },
        onLanguageChanged(value) {
            language = value.newValue
            $.fetchTrending()
        },
        onSinceChanged(value) {
            since = value.newValue
            $.fetchTrending()
        }
    }
</script>